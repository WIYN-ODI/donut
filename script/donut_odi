#! /usr/bin/env python

import os,sys
sys.path.append ("../")
import numpy as np
import pylab as py
import matplotlib.pyplot as plt

from donut.don11 import Donut
from astropy.io import fits
from astropy.table import Table
import json
import logging
from tempfile import NamedTemporaryFile
from mpi4py import MPI

comm = MPI.COMM_WORLD
root=0
rs_string ='[rank:%03i/%03i]'%(comm.rank,comm.size)

logging.basicConfig(format='%(asctime)s[%(levelname)s:%(threadName)s]-%(name)s-(%(filename)s:%(lineno)d):: %(message)s',
                    level=logging.DEBUG,
                    filename=os.path.basename(__file__)+'.log',
                    filemode='w')

log = logging.getLogger(__name__)

def main(argv):

    from optparse import OptionParser

    parser = OptionParser()

    parser.add_option('-i','--image',
                      help = 'Fit image file with donuts to measure.'
                      ,type='string')
    parser.add_option('-p','--parameters',
                      help = 'Base donut_odi json parameters. Position will be overwritten.'
                      ,type='string')
    parser.add_option('-o','--output',
                      help = 'Output file name.'
                      ,type='string')

    opt, args = parser.parse_args(argv)

    # Read basic parameters from JSON config file
    with open(opt.parameters) as par_file:
        donutpars = json.load(par_file)

    # Read image. ODI specific: pad the surounding of the image.
    img = fits.getdata(opt.image)
    xce = img.shape[0] / 2 + 512/4
    yce = img.shape[1] / 2 + 512/4
    _img = np.zeros ((512,512))
    _img [512/4:512/4+img.shape[0],512/4:512/4+img.shape[1]] = img
    img = _img

    # Write donut_odi parameter catalog
    basepar = donutpars['donpar'][0]
    parcatalog = {'donpar':[]}
    basepar['XC'] = int(xce)
    basepar['YC'] = int(yce)
    parcatalog['donpar'].append(dict(basepar))

    tmpCat = NamedTemporaryFile(delete=False)
    log.info('Donut catalog file: %s'%tmpCat.name)

    with open(tmpCat.name,'w') as fp:
        json.dump(parcatalog,fp)


    def donutfit(index):
        don = Donut()

        don.readpar(tmpCat.name,index)
        don.init()

        piximg = don.extract(img.T)
        zres = np.zeros(basepar['NZER']+3)

        try:
            if piximg.shape == (don.ngrid/2,don.ngrid/2):
                x2,immod,zer = don.fit(piximg.T)

                zres[0] = 1 # True
                zres[1] = don.xc
                zres[2] = don.yc
                zres[3:] = zer
            else:
                log.warning('Source %i to close to the border. Skipping...'%(index))
                zres[0] = 0 # False
        except AttributeError,e:
            log.exception(e)
            zres[0] = 0 # False
            pass
        except Exception,e:
            zres[0] = 0 # False
            pass

        don.savez(zres, opt.output)
        return zres

    zres = donutfit (0)
    print zres

    # for i in range(len(parcatalog)):
    #     log.info('Working on %4i/%4i'%(i+1,len(parcatalog)))
    #     print 'Working on %4i/%4i'%(i+1,len(cat))
    #     donutfit(i)
    # # exclude non-fitted sources
    sendbuf=""
    if MPI.COMM_WORLD.rank==0:
        sendbuf="done"
    recvbuf=MPI.COMM_WORLD.bcast(sendbuf,root)
    log.info(recvbuf)
    # print tmpCat.name

if __name__ == '__main__':
    main(sys.argv)
