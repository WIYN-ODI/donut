#! /usr/bin/env python

import os,sys
sys.path.append ("../")
import warnings
warnings.filterwarnings("ignore", category=DeprecationWarning)
import numpy as np
from donut.don11 import Donut
from astropy.io import fits
import json
import logging
from tempfile import NamedTemporaryFile


root=0

logging.basicConfig(format='%(asctime)s[%(levelname)s:%(threadName)s]-%(name)s-(%(filename)s:%(lineno)d):: %(message)s',
                    level=logging.DEBUG)#
#,
#                    filename=os.path.basename(__file__)+'.log',
#                    filemode='w')

log = logging.getLogger(__name__)

def main(argv):

    from optparse import OptionParser

    parser = OptionParser()

    parser.add_option('-i','--image',
                      help = 'Fit image file with donuts to measure.'
                      ,type='string')
    parser.add_option('-x','--x',
                      help = 'x position of donut'
                      ,type='int')
    parser.add_option('-y','--y',
                      help = 'y position of donut'
                      ,type='int')
    parser.add_option('-w','--w',
                      help = 'width of donut'
                      ,type='int')

    parser.add_option('-p','--parameters',
                      help = 'Base donut_odi json parameters. Position will be overwritten.'
                      ,type='string')
    parser.add_option('-o','--output',
                      help = 'Output file name.'
                      ,type='string')
    parser.add_option('--intra', action="store_true",
                      help = 'Set image as intra-focal.',
                      dest="intraFocal", default=True)

    parser.add_option('--extra', action="store_false",
                  help = 'Set image as extra-focal.',
                  dest="intraFocal")

    opt, args = parser.parse_args(argv)

    # Read basic parameters from JSON config file
    with open(opt.parameters) as par_file:
        donutpars = json.load(par_file)



    # Read image. ODI specific: pad the surounding of the image.
    # There is something odd here in the dimension. That needs follow-up.
    img = fits.getdata(opt.image)
    sky = np.median (img)
    print ("Sky value is: %8.1f" % sky)
    w2 = int(opt.w / 2)
    img = img [ opt.y-w2:opt.y+w2, opt.x-w2: opt.x+w2] - sky
    
    xce = img.shape[0] / 2 + 512/4
    yce = img.shape[1] / 2 + 512/4
    _img = np.zeros ((512,512))
    _img [512/4:512/4+img.shape[0],512/4:512/4+img.shape[1]] = img
    img = _img

    # Write donut_odi parameter catalog
    basepar = donutpars['donpar'][0]
    parcatalog = {'donpar':[]}
    basepar['XC'] = int(xce)
    basepar['YC'] = int(yce)
    if (opt.intraFocal):
        basepar['EFOC'] = 1
    else:
        basepar['EFOC'] = -1


    parcatalog['donpar'].append(dict(basepar))

    tmpCat = NamedTemporaryFile(delete=False)
    log.info('Donut catalog file: %s'%tmpCat.name)

    with open(tmpCat.name,'w') as fp:
        json.dump(parcatalog,fp)


    def donutfit(index):
        don = Donut()

        don.readpar(tmpCat.name,index)
        don.init()

        piximg = don.extract(img.T)
        zres = np.zeros(basepar['NZER']+3)

        try:
            if piximg.shape == (don.ngrid/2,don.ngrid/2):
                x2,immod,zer = don.fit(piximg.T)
                zres = zer
            else:
                log.warning('Source %i to close to the border. Skipping...'%(index))
                zres[0] = 0 # False
        except AttributeError,e:
            log.exception(e)
            zres[0] = 0 # False
            pass
        except Exception,e:
            zres[0] = 0 # False
            pass

        outtxt = "%s.txt" % opt.output
        outpng = "%s.png" % opt.output

        don.printz(zres, outtxt)
        Donut.displ(np.append ( np.append(piximg.T,immod, axis=-1), (piximg.T-immod), axis=-1), outpng)
        return zres

    zres = donutfit (0)




if __name__ == '__main__':
    main(sys.argv)
